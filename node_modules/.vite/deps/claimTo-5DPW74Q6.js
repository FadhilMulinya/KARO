import {
  isGetActiveClaimConditionSupported
} from "./chunk-7UW56KLX.js";
import {
  getClaimParams
} from "./chunk-MI4X7XJL.js";
import {
  isContractURISupported
} from "./chunk-VSSXFH4S.js";
import "./chunk-ZPXDD6L2.js";
import "./chunk-KUF6XG6D.js";
import {
  decimals
} from "./chunk-XYQNKNIC.js";
import {
  isDecimalsSupported
} from "./chunk-6R5CJIBV.js";
import "./chunk-SFM6XPT6.js";
import {
  once,
  prepareContractCall
} from "./chunk-PPX23FA3.js";
import "./chunk-F2NDM2JU.js";
import "./chunk-2FH4XCFL.js";
import {
  detectMethod
} from "./chunk-6S45W5AQ.js";
import "./chunk-WAYCTEWF.js";
import "./chunk-EKUFDWRO.js";
import "./chunk-UPFCIKZN.js";
import "./chunk-FL6IJKMT.js";
import "./chunk-YQ3CEJLX.js";
import "./chunk-DZFAH7EW.js";
import "./chunk-CLWLXFWW.js";
import "./chunk-JKNO5SWR.js";
import "./chunk-LGJLQQCP.js";
import "./chunk-7IZG4EP5.js";
import "./chunk-BNK74YTA.js";
import "./chunk-GDDTQ4UI.js";
import "./chunk-CJ2CQ55J.js";
import "./chunk-2FWTASOS.js";
import "./chunk-3IMKMHHP.js";
import "./chunk-XHFXQBSA.js";
import "./chunk-JOR3C3P6.js";
import "./chunk-RBM7JEQD.js";
import "./chunk-6QWQOHCG.js";
import "./chunk-6SJGCNT7.js";
import "./chunk-SSTIDLY4.js";
import "./chunk-SHWHM7JY.js";
import "./chunk-EZ4JTQAA.js";
import "./chunk-MSFXBLHD.js";

// node_modules/thirdweb/dist/esm/extensions/erc20/__generated__/IDropERC20/write/claim.js
var FN_SELECTOR = "0x84bb1e42";
var FN_INPUTS = [
  {
    type: "address",
    name: "receiver"
  },
  {
    type: "uint256",
    name: "quantity"
  },
  {
    type: "address",
    name: "currency"
  },
  {
    type: "uint256",
    name: "pricePerToken"
  },
  {
    type: "tuple",
    name: "allowlistProof",
    components: [
      {
        type: "bytes32[]",
        name: "proof"
      },
      {
        type: "uint256",
        name: "quantityLimitPerWallet"
      },
      {
        type: "uint256",
        name: "pricePerToken"
      },
      {
        type: "address",
        name: "currency"
      }
    ]
  },
  {
    type: "bytes",
    name: "data"
  }
];
var FN_OUTPUTS = [];
function isClaimSupported(availableSelectors) {
  return detectMethod({
    availableSelectors,
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS]
  });
}
function claim(options) {
  const asyncOptions = once(async () => {
    return "asyncParams" in options ? await options.asyncParams() : options;
  });
  return prepareContractCall({
    contract: options.contract,
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    params: async () => {
      const resolvedOptions = await asyncOptions();
      return [
        resolvedOptions.receiver,
        resolvedOptions.quantity,
        resolvedOptions.currency,
        resolvedOptions.pricePerToken,
        resolvedOptions.allowlistProof,
        resolvedOptions.data
      ];
    },
    value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.value;
    },
    accessList: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.accessList;
    },
    gas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gas;
    },
    gasPrice: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gasPrice;
    },
    maxFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxFeePerGas;
    },
    maxPriorityFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxPriorityFeePerGas;
    },
    nonce: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.nonce;
    },
    extraGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.extraGas;
    },
    erc20Value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.erc20Value;
    }
  });
}

// node_modules/thirdweb/dist/esm/extensions/erc20/drops/write/claimTo.js
function claimTo(options) {
  return claim({
    contract: options.contract,
    asyncParams: async () => {
      const quantity = await (async () => {
        if ("quantityInWei" in options) {
          return options.quantityInWei;
        }
        const { toUnits } = await import("./units-T3VRDQRD.js");
        return toUnits(options.quantity, await decimals({ contract: options.contract }));
      })();
      return getClaimParams({
        type: "erc20",
        contract: options.contract,
        to: options.to,
        quantity,
        from: options.from,
        tokenDecimals: await decimals({ contract: options.contract })
      });
    }
  });
}
function isClaimToSupported(availableSelectors) {
  return [
    // has to support the claim method
    isClaimSupported(availableSelectors),
    // has to support the getActiveClaimCondition method
    isGetActiveClaimConditionSupported(availableSelectors),
    // has to support the decimals method
    isDecimalsSupported(availableSelectors),
    // requires contractMetadata for claimer proofs
    isContractURISupported(availableSelectors)
  ].every(Boolean);
}
export {
  claimTo,
  isClaimToSupported
};
//# sourceMappingURL=claimTo-5DPW74Q6.js.map
