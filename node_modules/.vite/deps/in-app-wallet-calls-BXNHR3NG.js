import {
  randomBytesHex
} from "./chunk-O6NPMYGU.js";
import {
  sendBatchTransaction
} from "./chunk-ES4JQ4WC.js";
import {
  sendAndConfirmTransaction
} from "./chunk-AQ3FNDOZ.js";
import {
  eth_getTransactionReceipt
} from "./chunk-7NUUWJUR.js";
import "./chunk-5SLAE63A.js";
import "./chunk-HH2NFLAA.js";
import "./chunk-NQQRGEIW.js";
import "./chunk-2UJXDFOT.js";
import "./chunk-2FH4XCFL.js";
import "./chunk-LRAJPM7U.js";
import "./chunk-6S45W5AQ.js";
import "./chunk-BIIFEFU6.js";
import "./chunk-SHLB24UB.js";
import "./chunk-NVBBE2QQ.js";
import "./chunk-HAADYJEF.js";
import "./chunk-EKUFDWRO.js";
import "./chunk-UPFCIKZN.js";
import "./chunk-FL6IJKMT.js";
import "./chunk-YQ3CEJLX.js";
import "./chunk-DZFAH7EW.js";
import "./chunk-CLWLXFWW.js";
import "./chunk-JKNO5SWR.js";
import {
  getRpcClient
} from "./chunk-LGJLQQCP.js";
import "./chunk-7IZG4EP5.js";
import "./chunk-BNK74YTA.js";
import "./chunk-GDDTQ4UI.js";
import "./chunk-CJ2CQ55J.js";
import "./chunk-2FWTASOS.js";
import "./chunk-3IMKMHHP.js";
import "./chunk-XHFXQBSA.js";
import "./chunk-JOR3C3P6.js";
import "./chunk-RBM7JEQD.js";
import "./chunk-6QWQOHCG.js";
import "./chunk-6SJGCNT7.js";
import "./chunk-SSTIDLY4.js";
import "./chunk-SHWHM7JY.js";
import "./chunk-EZ4JTQAA.js";
import "./chunk-MSFXBLHD.js";

// node_modules/thirdweb/dist/esm/wallets/in-app/core/eip5972/in-app-wallet-calls.js
var bundlesToTransactions = /* @__PURE__ */ new Map();
var MAX_BUNDLE_ENTRIES = 1e3;
function setBundleId(bundleId, hashes) {
  if (bundlesToTransactions.size >= MAX_BUNDLE_ENTRIES) {
    const lru = bundlesToTransactions.keys().next().value;
    bundlesToTransactions.delete(lru);
  }
  bundlesToTransactions.set(bundleId, hashes);
}
async function inAppWalletSendCalls(args) {
  const { account, calls } = args;
  const hashes = [];
  const bundleId = randomBytesHex(65);
  bundlesToTransactions.set(bundleId, hashes);
  if (account.sendBatchTransaction) {
    const receipt = await sendBatchTransaction({
      account,
      transactions: calls
    });
    hashes.push(receipt.transactionHash);
    setBundleId(bundleId, hashes);
  } else {
    for (const tx of calls) {
      const receipt = await sendAndConfirmTransaction({
        account,
        transaction: tx
      });
      hashes.push(receipt.transactionHash);
      bundlesToTransactions.set(bundleId, hashes);
    }
  }
  return bundleId;
}
async function inAppWalletGetCallsStatus(args) {
  const { wallet, client, bundleId } = args;
  const chain = wallet.getChain();
  if (!chain) {
    throw new Error("Failed to get calls status, no active chain found");
  }
  const bundle = bundlesToTransactions.get(bundleId);
  if (!bundle) {
    throw new Error("Failed to get calls status, unknown bundle id");
  }
  const request = getRpcClient({ client, chain });
  let status = "CONFIRMED";
  const receipts = await Promise.all(bundle.map((hash) => eth_getTransactionReceipt(request, { hash }).then((receipt) => ({
    logs: receipt.logs.map((l) => ({
      address: l.address,
      data: l.data,
      topics: l.topics
    })),
    status: receipt.status,
    blockHash: receipt.blockHash,
    blockNumber: receipt.blockNumber,
    gasUsed: receipt.gasUsed,
    transactionHash: receipt.transactionHash
  })).catch(() => {
    status = "PENDING";
    return null;
  })));
  return {
    status,
    receipts: receipts.filter((r) => r !== null)
    // ts 5.5 please come we need you
  };
}
export {
  inAppWalletGetCallsStatus,
  inAppWalletSendCalls
};
//# sourceMappingURL=in-app-wallet-calls-BXNHR3NG.js.map
